/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/13039fff-ce66-4950-be1b-fdfc505f9f15 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudSwitch muteSwitch;
  int light_level;
  int sound_level;
  CloudRelativeHumidity humid;
  CloudTemperature temp;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch. */
#include <Arduino.h>
#include "thingProperties.h"
#include <DHT.h>
#include <DHT_U.h>
#define SOUND_PIN 34
#define LDR_PIN 32
#define DHT_PIN 14
#define DHT_SENSOR_TYPE DHT11
#define RED_LED_PIN 4
#define BLUE_LED_PIN 5
#define YELLOW_LED_PIN 18
#define BUZZER_PIN 26


const int sampleWindow = 50;
DHT dht_sensor(DHT_PIN, DHT_SENSOR_TYPE);
int readSoundLevel();
void runFeedback(float temperature, int light );

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  pinMode(RED_LED_PIN, OUTPUT);
  pinMode(YELLOW_LED_PIN, OUTPUT);
  pinMode(BLUE_LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(SOUND_PIN, INPUT);
  pinMode(LDR_PIN, INPUT);
  dht_sensor.begin();

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 

  static unsigned long lastReadTime = 0;
  const unsigned long readInterval = 2000;

 
  if(millis() - lastReadTime >= readInterval){
    lastReadTime = millis();
    int sound_val = readSoundLevel();
    float temp_val = dht_sensor.readTemperature();
    float humid_val = dht_sensor.readHumidity();
    int light_val = analogRead(LDR_PIN);
  
    if(isnan(temp_val) || isnan(humid_val)){
      Serial.println("Failed to read from the DHT Sensor");
      runFeedback(temp_val, light_val);
    }
    else{
      temp = temp_val;
      humid = humid_val;

      runFeedback(temp_val, light_val);

      Serial.print("Humidity:   "); Serial.print(humid); Serial.print("   "); 
      Serial.print("Temperature:    "); Serial.println(temp); 
    }

    sound_level = sound_val;
    light_level = light_val;

    Serial.print("Sound Level:    "); Serial.print(sound_level); Serial.print("   ");
    Serial.print("Light Level:    "); Serial.println(light_level);
  }
  
  
}

int readSoundLevel(){
    unsigned long startMillis = millis();
    unsigned int signalMax = 0;
    unsigned int signalMin = 4095;

    while(millis() - startMillis < sampleWindow){
      int sample = analogRead(SOUND_PIN);
      if(sample > signalMax){
        signalMax = sample;
      }
      if(sample < signalMin){
        signalMin = sample;
      }

    }
  return signalMax - signalMin;  
}



void runFeedback(float temperature, int light ){

  int frequency = 1000;
  float tempThreshold = 27.0;
  int lightThreshold = 1000; 
  if(isnan(temp)){
    digitalWrite(RED_LED_PIN, HIGH);
    digitalWrite(BLUE_LED_PIN, HIGH);
    digitalWrite(YELLOW_LED_PIN, HIGH);
    delay(100);
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(BLUE_LED_PIN, LOW);
    digitalWrite(YELLOW_LED_PIN, LOW);
    return;
  }

  if(temp > tempThreshold){
    digitalWrite(RED_LED_PIN, HIGH);
    digitalWrite(BLUE_LED_PIN, LOW);
    digitalWrite(YELLOW_LED_PIN, LOW);
    
    if(!muteSwitch){
      tone(BUZZER_PIN, frequency);
      delay(50);
      noTone(BUZZER_PIN);
      delay(50);

      tone(BUZZER_PIN, frequency);
      delay(50);
      noTone(BUZZER_PIN);
    }
    
  }
  else if(light_level < lightThreshold){
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(BLUE_LED_PIN, LOW);
    digitalWrite(YELLOW_LED_PIN, HIGH);
    digitalWrite(BUZZER_PIN, LOW);

  }
  else{
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(BLUE_LED_PIN, HIGH);
    digitalWrite(YELLOW_LED_PIN, LOW);
    digitalWrite(BUZZER_PIN, LOW);
  }
}





/*
  Since SoundLevel is READ_WRITE variable, onSoundLevelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoundLevelChange()  {
  // Add your code here to act upon SoundLevel change
}
void onMuteSwitchChange()  {
  // Add your code here to act upon MuteSwitch change
}